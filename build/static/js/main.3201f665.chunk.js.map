{"version":3,"sources":["logo.svg","sounds/bass1.mp3","sounds/drumhihat1.mp3","sounds/vibes1.mp3","sounds/guitar1.wav","sounds/tambourine.wav","musicVars.js","music.js","weather.js","App.js","reportWebVitals.js","index.js"],"names":["require","Chord","piano","Progression","Scale","Tone","urls","C4","C5","baseUrl","volume","toDestination","bell","vibesmp3","onload","console","log","guitar","G4","guitarwav","value","hihat","C1","hihatmp3","tambourine","tambourinewav","bassPluck","bassmp3","synth","kickDrum","iimin7","getChord","V7","IMaj7","I6","vimin7","iiimin7","bII7b5","II7","IVMaj7","viimin7","III7","twoFiveOneProg","notes","twoFiveOne","concat","rainingOutsideProg","rainingOutside","nardisBridgeProg","nardisBridge","ipanema","autumnLeaves","oneNote","time","daytimeRhythm1","daytimeRhythm2","twoFourEigthRhythm","twoThreeClaveRhythm1","twoThreeClaveRhythm2","oneFourRhythm","dottedQuarterEigth","getRandomInt","max","Math","floor","random","getRandomNote","chord","detect","substr","includes","split","scale","chordScales","get","noteMax","length","note","getBassNotes","progression","bassNotes","forEach","push","makeProgression","instrument","duration","rhythms","measuresPerChord","loop","loopEnd","parts","start","counter","rhythm","part","triggerAttackRelease","makePerc","getWeather","adjust","fetch","then","resp","json","data","weatherID","weather","id","catch","App","progRhythm","bassRhythm","percRhythm","progDuration","percNotes","melodyInst","progInst","bassInst","percInst","bpm","setRainy","MusicVars","MusicFuncs","startSong","melody1","totalLength","melody","measure","beat","subdivision","entry","adjustForWeather","screenBg","document","getElementById","startButton","weatherMain","classList","remove","add","textContent","hours","Date","getHours","useEffect","className","onClick","state","stop","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"sMAAe,I,YCAA,G,YAAA,IAA0B,mCCA1B,MAA0B,uCCA1B,MAA0B,mCCA1B,MAA0B,oCCA1B,MAA0B,uCCOzC,EAAsCA,EAAQ,IAAtCC,EAAR,EAAQA,MAGKC,GAHb,EAAeC,YAAf,EAA4BC,MAGP,IAAIC,IAAa,CACpCC,KAAM,CACJC,GAAI,SACJC,GAAI,UAENC,QAAS,6CACTC,QAAS,IACRC,iBAEUC,EAAO,IAAIP,IACtB,CAAEE,GAAIM,GACN,CACEC,OAAQ,WACNC,QAAQC,IAAI,mBAGdL,gBAESM,EAAS,IAAIZ,IACxB,CAAEa,GAAIC,GACN,CACEL,OAAQ,WACNC,QAAQC,IAAI,iBACZC,EAAOP,OAAOU,OAAS,MAG3BT,gBAEWU,EAAQ,IAAIhB,IACvB,CAAEiB,GAAIC,GACN,CACET,OAAQ,WACNC,QAAQC,IAAI,gBACZK,EAAMX,OAAOU,OAAS,MAG1BT,gBAEWa,EAAa,IAAInB,IAC5B,CAAEiB,GAAIG,GACN,CACEX,OAAQ,WACNC,QAAQC,IAAI,qBACZQ,EAAWd,OAAOU,OAAS,MAG/BT,gBAEWe,EAAY,IAAIrB,IAC3B,CAAEE,GAAIoB,GACN,CACEb,OAAQ,WACNC,QAAQC,IAAI,eACZU,EAAUhB,OAAOU,OAAS,MAG9BT,gBAEWiB,GAAQ,IAAIvB,KAAiBM,gBAC7BkB,EAAW,IAAIxB,IAAmB,CAC7CK,QAAS,IACRC,gBAGUmB,EAAS7B,EAAM8B,SAAS,OAAQ,KAAM,MACtCC,EAAK/B,EAAM8B,SAAS,IAAK,KAAM,MAC/BE,EAAQhC,EAAM8B,SAAS,OAAQ,KAAM,MACrCG,EAAKjC,EAAM8B,SAAS,IAAK,KAAM,MAC/BI,EAASlC,EAAM8B,SAAS,OAAQ,KAAM,MACtCK,EAAUnC,EAAM8B,SAAS,OAAQ,KAAM,MACvCM,EAASpC,EAAM8B,SAAS,MAAO,MAAO,OACtCO,EAAMrC,EAAM8B,SAAS,IAAK,KAAM,MAChCQ,EAAStC,EAAM8B,SAAS,OAAQ,KAAM,MACtCS,EAAUvC,EAAM8B,SAAS,OAAQ,MAAO,OACxCU,EAAOxC,EAAM8B,SAAS,IAAK,KAAM,OAI1CW,EAAiB,CACnBZ,EAAOa,MACPX,EAAGW,MACHV,EAAMU,MACNT,EAAGS,OAGQC,EADbF,EAAiBA,EAAeG,OAAOH,GAGnCI,EAAqB,CACvBX,EAAOQ,MACPP,EAAQO,MACRb,EAAOa,MACPV,EAAMU,OAGKI,EADbD,EAAqBA,EAAmBD,OAAOC,GAG3CE,EAAmB,CACrBZ,EAAQO,MACRV,EAAMU,MACNP,EAAQO,MACRV,EAAMU,OAGKM,EADbD,EAAmBA,EAAiBH,OAAOG,GAGhCE,EAAU,CACnBjB,EAAMU,MAAOV,EAAMU,MAAOL,EAAIK,MAAOL,EAAIK,MACzCb,EAAOa,MAAON,EAAOM,MAAOV,EAAMU,MAAON,EAAOM,OAGvCQ,EAAe,CACxBrB,EAAOa,MAAOX,EAAGW,MAAOV,EAAMU,MAAOJ,EAAOI,MAC5CH,EAAQG,MAAOF,EAAKE,MAAOR,EAAOQ,MAAOR,EAAOQ,OAIrCS,EAAU,CAAC,CAAEC,KAAM,QAEnBC,EAAiB,CAC5B,CAAED,KAAM,OACR,CAAEA,KAAM,OACR,CAAEA,KAAM,QAGGE,EAAiB,CAC5B,CAAEF,KAAM,OACR,CAAEA,KAAM,SACR,CAAEA,KAAM,SACR,CAAEA,KAAM,SACR,CAAEA,KAAM,UAQGG,EAAqB,CAChC,CAAEH,KAAM,OACR,CAAEA,KAAM,OACR,CAAEA,KAAM,UAGGI,EAAuB,CAClC,CAAEJ,KAAM,OACR,CAAEA,KAAM,QAGGK,EAAuB,CAClC,CAAEL,KAAM,OACR,CAAEA,KAAM,SACR,CAAEA,KAAM,QAGGM,EAAgB,CAC3B,CAAEN,KAAM,OACR,CAAEA,KAAM,QAcGO,EAAqB,CAChC,CAAEP,KAAM,OACR,CAAEA,KAAM,SACR,CAAEA,KAAM,SACR,CAAEA,KAAM,UCtLV,EAAyBrD,EAAQ,IAAzBC,EAAR,EAAQA,MAAOG,EAAf,EAAeA,MAER,SAASyD,EAAaC,GAC3B,OAAOC,KAAKC,MAAMD,KAAKE,SAAWH,GAI7B,SAASI,GAAcC,IAC5BA,EAAQlE,EAAMmE,OAAOD,GAAO,IACXE,OAAO,EAAG,GAEvBF,EAAMG,SAAS,OAEjBH,GADAA,EAAQA,EAAMI,MAAM,MACN,IAEhB,IAAIC,EAAQvE,EAAMwE,YAAYN,EAAM,IACpCK,EAAQA,EAAM,GAEd,IAAM7B,EAAQvC,EAAMsE,IAAI,KAAOF,GACzBG,EAAUhC,EAAMA,MAAMiC,OACxBC,EAAOlC,EAAMA,MAAMkB,EAAac,IAEpC,OADAE,GAAehB,EAAa,GAAK,EAyB5B,SAASiB,GAAaC,GAC3B,IAAIC,EAAY,GAIhB,OAHAD,EAAYE,SAAQ,SAAAd,GAClBa,EAAUE,KAAK,CAACf,EAAM,QAEjBa,EAwBF,SAASG,GAAgBC,EAAYL,EAAaM,EAAUC,EACjEC,EAAkBC,EAAMC,GACtB,GAAkB,MAAdL,EAAJ,CACA,IAAIM,EAAQ,GACRC,EAAQ,EACRC,EAAU,EACVC,EAASP,EAAQM,GAUrB,OATAb,EAAYE,SAAQ,SAAAd,GAClB,IACM2B,EA7BL,SAAkBV,EAAYzC,EAAO0C,EAAUQ,EAAQF,EAAOH,EAAMC,GACzE,IAAMK,EAAO,IAAIzF,KAAU,SAASgD,GAClC+B,EAAWW,qBAAqBpD,EAAO0C,EAAUhC,KAChDwC,GAAQF,MAAMA,GAGjB,OAFAG,EAAKN,KAAOA,EACZM,EAAKL,QAAUA,EACRK,EAuBUE,CAASZ,EAAYjB,EAAOkB,EAAUQ,EADrCF,EAAQ,IAEXH,EAAMC,GACjBC,EAAMR,KAAKY,GACXH,GAAgBJ,EAChBK,GAAWA,EAAU,GAAKN,EAAQV,OAClCiB,EAASP,EAAQM,MAEZF,GCjFJ,SAASO,GAAWC,GACzBC,MAAM,qGACLC,MAAK,SAASC,GAAQ,OAAOA,EAAKC,UAClCF,MAAK,SAASG,GAEb,IAAIC,EAAYD,EAAKE,QAAQ,GAAGC,GAEhCR,EAAOM,MAERG,OAAM,e,mBCHT,GAAsC3G,EAAQ,IAA9C,GAAQC,MAAR,GAAeE,YAAf,GAA4BC,MAuebwG,OAref,WAmSE,IACI7B,EAAa8B,EAAYC,EAAYC,EACrCC,EAAchC,EAAWiC,EACzBC,EAAYC,EAAUC,EAAUC,EAHhCC,EAAM,GA2DV,SAASC,IACPxC,EAAcyC,EACdF,EAAMG,EAAwB,IAAM,GAEpCZ,EAAa,CAACW,GACdV,EAAa,CAACU,EAA8BA,GAC5CxC,EAAYyC,GAAwB1C,GACpCgC,EAAa,CAACS,EAAgCA,GAC9CP,EAAY,CAAC,KAAM,MACnBD,EAAe,KAEfQ,EAAe9G,OAAOU,MAAQ,EAC9B8F,EAAaM,EACbA,EAAgB9G,OAAOU,OAAS,GAChC+F,EAAWK,EACXA,EAAe9G,OAAOU,OAAS,GAC/BgG,EAAWI,EACXH,EAAWG,EAqBb,SAASE,IACP,IAAMC,EF7XH,SAAwB5C,EAAa6C,GAE1C,IADA,IAAIC,EAAS,GACJC,EAAU,EAAGA,EAAUF,EAAaE,IAC3C,GAAuB,GAAnBjE,EAAa,GAGjB,IAFA,IACIM,EAAQY,EAAY+C,EADP/C,EAAYH,QAEpBmD,EAAO,EAAGA,EAAO,EAAGA,IAC3B,GAAuB,GAAnBlE,EAAa,GACjB,IAAK,IAAImE,EAAc,EAAGA,EAAc,EAAGA,IACzC,GAAuB,GAAnBnE,EAAa,GAAjB,CACA,IAEMoE,EAAQ,CAAE,KADHH,EAAU,IAAMC,EAAO,IAAkB,EAAZC,EACZ,KAFjB9D,GAAcC,GAEiB,SAAY,MACxD0D,EAAO3C,KAAK+C,GAIlB,OAAOJ,EE4WWJ,CAA0B1C,EAAa,IFtVpD,SAAoBK,EAAYyC,EAAQrC,EAAMC,GACnD,IAAMK,EAAO,IAAIzF,KAAU,SAASgD,EAAMwB,GACxCO,EAAWW,qBAAqBlB,EAAKA,KAAMA,EAAKQ,SAAUhC,KACzDwE,GAAQlC,MAAM,GACjBG,EAAKN,KAAOA,EACZM,EAAKL,QAAUA,GEkVOgC,CAAsBP,EAAYS,GAAS,EAAO,OACxDF,GAA2BJ,EAAUJ,EAAW,KAAMF,EAAY,GAAG,EAAM,OAClEU,GAA2BN,EAAUpC,EAAaiC,EAAcH,EACrF,GAAG,EAAO,OACEY,GAA2BL,EAAUpC,EAAW,KAAM8B,EAClE,GAAG,EAAO,OAiBd,SAASoB,EAAiB1B,GACxB,IAAI2B,EAAWC,SAASC,eAAe,qBACnCC,EAAcF,SAASC,eAAe,gBACtCE,EAAcxE,KAAKC,MAAMwC,EAAY,KAEpB,CAAC,EAAG,EAAG,EAAG,GACZlC,SAASiE,KAC1BJ,EAASK,UAAUC,OAAO,sBAC1BN,EAASK,UAAUC,OAAO,wBAC1BN,EAASK,UAAUC,OAAO,oBAC1BN,EAASK,UAAUC,OAAO,mBAC1BN,EAASK,UAAUC,OAAO,oBAET,GAAfF,IACFJ,EAASK,UAAUE,IAAI,mBACvBnB,IACAe,EAAYK,YAAc,0BAET,GAAfJ,IACFJ,EAASK,UAAUE,IAAI,mBACvBnB,IACAe,EAAYK,YAAc,oBAET,GAAfJ,IACFJ,EAASK,UAAUE,IAAI,mBACvBnB,IACAe,EAAYK,YAAc,cAET,GAAfJ,IACFJ,EAASK,UAAUE,IAAI,mBAtEzB3D,EAAcyC,EACdF,EAAMG,EAAwB,IAAM,GAEpCZ,EAAa,CAACW,GACdV,EAAa,CAACU,GACdxC,EAAYyC,GAAwB1C,GACpCgC,EAAa,CAACS,GACdP,EAAY,CAAC,KAAM,MACnBD,EAAe,KAEfE,EAAaM,EACbA,EAAe9G,OAAOU,OAAS,GAC/B+F,EAAWK,EACXJ,EAAW,KACXC,EAAWG,EA0DTc,EAAYK,YAAc,UApJ9B1C,KAwJA,IACI2C,GADO,IAAIC,MACEC,WA8BjB,OA3BAC,qBAAU,WACR,IAAIZ,EAAWC,SAASC,eAAe,qBACnCC,EAAcF,SAASC,eAAe,gBAC1CF,EAASK,UAAUC,OAAO,sBAC1BN,EAASK,UAAUC,OAAO,wBAC1BN,EAASK,UAAUC,OAAO,oBAC1BN,EAASK,UAAUC,OAAO,mBAC1BN,EAASK,UAAUC,OAAO,mBACtBG,GAAS,IAAMA,EAAQ,GACzBT,EAASK,UAAUE,IAAI,oBA9HzB3D,EAAcyC,EACdF,EAAMG,EAAwB,IAAM,GAEpCZ,EAAa,CAACW,EAAyBA,GACvCV,EAAa,CAACU,EAA8BA,GAC5CxC,EAAYyC,GAAwB1C,GACpCgC,EAAa,CAACS,EAAgCA,GAC9CP,EAAY,CAAC,KAAM,MACnBD,EAAe,KAEfE,EAAaM,EACbL,EAAWK,EACXJ,EAAW,KACXC,EAAW,KAmHTiB,EAAYK,YAAc,mBAEnB,GAAKC,GAASA,EAAQ,IAC7BT,EAASK,UAAUE,IAAI,sBAvKzB3D,EAAcyC,EACdF,EAAMG,EAAwB,IAAM,IAEpCZ,EAAa,CAACW,EAA0BA,GACxCV,EAAa,CAACU,EAA8BA,GAC5CxC,EAAYyC,GAAwB1C,GACpCgC,EAAa,CAACS,EAAgCA,GAC9CP,EAAY,CAAC,KAAM,MACnBD,EAAe,KAEfE,EAAaM,EACbA,EAAgB9G,OAAOU,OAAS,EAChC+F,EAAWK,EACXJ,EAAWI,EACXH,EAAWG,EA2JTc,EAAYK,YAAc,iBAEnB,IAAMC,GAASA,EAAQ,KAC9BT,EAASK,UAAUE,IAAI,wBA1JzB3D,EAAcyC,EACdF,EAAMG,EAAwB,IAAM,GAEpCZ,EAAa,CAACW,EAA0BA,GACxCV,EAAa,CAACU,EAAyBA,GACvCxC,EAAYyC,GAAwB1C,GACpCgC,EAAa,CAACS,GACdP,EAAY,CAAC,KAAM,MACnBD,EAAe,KAEfE,EAAaM,EACbA,EAAgB9G,OAAOU,OAAS,GAChC+F,EAAWK,EACXJ,EAAWI,EACXH,EAAWG,EA8ITc,EAAYK,YAAc,uBAG5B1C,GAAWiC,MAIX,sBAAKxB,GAAG,oBAAoBsC,UAAU,2CAAtC,SACE,yBAAQtC,GAAG,eAAeuC,QAAS,WAhFR,YAAzB5I,IAAe6I,OACjB7I,MACAA,IAAeiH,IAAIlG,MAAQkG,EAC3BjH,IAAemF,MAAO,EACtBnF,IAAeoF,QAAU,MACzBpF,IAAesF,QACf+B,KAEArH,IAAe8I,QAwEf,sBCxeSC,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBlD,MAAK,YAAkD,IAA/CmD,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,eAAC,IAAMC,WAAP,UACE,eAAC,GAAD,MAEF1B,SAASC,eAAe,SAM1Be,O","file":"static/js/main.3201f665.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export default __webpack_public_path__ + \"static/media/bass1.e087727a.mp3\";","export default __webpack_public_path__ + \"static/media/drumhihat1.89f0002e.mp3\";","export default __webpack_public_path__ + \"static/media/vibes1.9140d901.mp3\";","export default __webpack_public_path__ + \"static/media/guitar1.0b025768.wav\";","export default __webpack_public_path__ + \"static/media/tambourine.c307ee17.wav\";","import * as Tone from \"tone\";\nimport bassmp3 from './sounds/bass1.mp3';\nimport hihatmp3 from './sounds/drumhihat1.mp3';\nimport vibesmp3 from './sounds/vibes1.mp3';\nimport guitarwav from './sounds/guitar1.wav';\nimport tambourinewav from './sounds/tambourine.wav';\n\nconst { Chord, Progression, Scale } = require(\"@tonaljs/tonal\");\n\n// declare samples\nexport const piano = new Tone.Sampler({\n  urls: {\n    C4: \"C4.mp3\",\n    C5: \"C5.mp3\",\n  },\n  baseUrl: \"https://tonejs.github.io/audio/salamander/\",\n  volume: -4\n}).toDestination();\n\nexport const bell = new Tone.Sampler(\n  { C4: vibesmp3 },\n  { \n    onload: () => {\n      console.log(\"loaded vibes\");\n    }\n  }\n  ).toDestination();\n\nexport const guitar = new Tone.Sampler(\n  { G4: guitarwav },\n  { \n    onload: () => {\n      console.log(\"loaded guitar\");\n      guitar.volume.value = -10;\n    }\n  }\n).toDestination();\n\nexport const hihat = new Tone.Sampler(\n  { C1: hihatmp3 },\n  { \n    onload: () => {\n      console.log(\"loaded hihat\");\n      hihat.volume.value = -10;\n    }\n  },\n).toDestination();\n\nexport const tambourine = new Tone.Sampler(\n  { C1: tambourinewav },\n  { \n    onload: () => {\n      console.log(\"loaded tambourine\");\n      tambourine.volume.value = -10;\n    }\n  }\n).toDestination();\n\nexport const bassPluck = new Tone.Sampler(\n  { C4: bassmp3 },\n  { \n    onload: () => {\n      console.log(\"loaded bass\");\n      bassPluck.volume.value = -10;\n    }\n  }\n).toDestination();\n\nexport const synth = new Tone.PolySynth().toDestination();\nexport const kickDrum = new Tone.MembraneSynth({\n  volume: -6\n}).toDestination();\n\n// declare chords\nexport const iimin7 = Chord.getChord(\"min7\", \"A4\", \"A4\");\nexport const V7 = Chord.getChord(\"7\", \"D4\", \"A4\");\nexport const IMaj7 = Chord.getChord(\"maj7\", \"G4\", \"G4\");\nexport const I6 = Chord.getChord(\"6\", \"G4\", \"G4\");\nexport const vimin7 = Chord.getChord(\"min7\", \"E4\", \"E4\");\nexport const iiimin7 = Chord.getChord(\"min7\", \"B4\", \"B4\");\nexport const bII7b5 = Chord.getChord(\"7b5\", \"G#4\", \"G#4\");\nexport const II7 = Chord.getChord(\"7\", \"A4\", \"A4\");\nexport const IVMaj7 = Chord.getChord(\"maj7\", \"C4\", \"G4\");\nexport const viimin7 = Chord.getChord(\"min7\", \"F#4\", \"F#4\");\nexport const III7 = Chord.getChord(\"7\", \"B3\", \"F#4\");\n\n// declare chord progressions\n// chord progressions will be 8 measures\nlet twoFiveOneProg = [\n  iimin7.notes,\n  V7.notes,\n  IMaj7.notes,\n  I6.notes\n];\ntwoFiveOneProg = twoFiveOneProg.concat(twoFiveOneProg);\nexport const twoFiveOne = twoFiveOneProg;\n\nlet rainingOutsideProg = [\n  vimin7.notes,\n  iiimin7.notes,\n  iimin7.notes,\n  IMaj7.notes\n];\nrainingOutsideProg = rainingOutsideProg.concat(rainingOutsideProg);\nexport const rainingOutside = rainingOutsideProg;\n\nlet nardisBridgeProg = [\n  iiimin7.notes,\n  IMaj7.notes,\n  iiimin7.notes,\n  IMaj7.notes\n];\nnardisBridgeProg = nardisBridgeProg.concat(nardisBridgeProg);\nexport const nardisBridge = nardisBridgeProg;\n\nexport let ipanema = [\n  IMaj7.notes, IMaj7.notes, II7.notes, II7.notes,\n  iimin7.notes, bII7b5.notes, IMaj7.notes, bII7b5.notes\n];\n\nexport let autumnLeaves = [\n  iimin7.notes, V7.notes, IMaj7.notes, IVMaj7.notes,\n  viimin7.notes, III7.notes, vimin7.notes, vimin7.notes\n];\n\n// declare rhythms for 1 measure\nexport const oneNote = [{ time: '0:0' }];\n\nexport const daytimeRhythm1 = [\n  { time: '0:0' },\n  { time: '0:1' },\n  { time: '0:3' },\n];\n\nexport const daytimeRhythm2 = [\n  { time: '0:0' },\n  { time: '0:0:2' },\n  { time: '0:1:2' },\n  { time: '0:2:2' },\n  { time: '0:3:2' },\n]\n\nexport const twoFourRhythm = [\n  { time: '0:1' },\n  { time: '0:3' },\n]\n\nexport const twoFourEigthRhythm = [\n  { time: '0:1' },\n  { time: '0:3' },\n  { time: '0:3:2' },\n]\n\nexport const twoThreeClaveRhythm1 = [\n  { time: '0:1' },\n  { time: '0:2' },\n]\n\nexport const twoThreeClaveRhythm2 = [\n  { time: '0:0' },\n  { time: '0:1:2' },\n  { time: '0:3' }\n]\n\nexport const oneFourRhythm = [\n  { time: '0:0' },\n  { time: '0:3' }\n]\n\nexport const eigthNoteRhythm = [\n  { time: '0:0' },\n  { time: '0:0:2' },\n  { time: '0:1' },\n  { time: '0:1:2' },\n  { time: '0:2' },\n  { time: '0:2:2' },\n  { time: '0:3' },\n  { time: '0:3:2' }\n]\n\nexport const dottedQuarterEigth = [\n  { time: '0:0' },\n  { time: '0:1:2' },\n  { time: '0:2:0' },\n  { time: '0:3:2' }\n];\n\nexport const progressionRhythms = [\n  [oneNote],\n  [oneFourRhythm, oneNote],\n  [daytimeRhythm1, daytimeRhythm2],\n  [twoThreeClaveRhythm1, twoThreeClaveRhythm2],\n  [twoThreeClaveRhythm2, twoThreeClaveRhythm1],\n]\n\nexport const percRhythms = [\n  [oneNote],\n  [oneFourRhythm],\n  [twoThreeClaveRhythm1, twoThreeClaveRhythm2],\n  [twoThreeClaveRhythm2, twoThreeClaveRhythm1],\n  [eigthNoteRhythm]\n]","import * as Tone from \"tone\";\nimport * as MusicVars from './musicVars.js';\nconst { Chord, Scale } = require(\"@tonaljs/tonal\");\n\nexport function getRandomInt(max) {\n  return Math.floor(Math.random() * max);\n}\n\n// get random note in chord\nexport function getRandomNote(chord) {\n  chord = Chord.detect(chord)[0];\n  let bass = chord.substr(0, 1);\n  //console.log(chord);\n  if (chord.includes('/')) {\n    chord = chord.split('/');\n    chord = chord[0];\n  }\n  let scale = Chord.chordScales(chord[0]);\n  scale = scale[0];\n  //console.log(scale);\n  const notes = Scale.get(\"G \" + scale);\n  const noteMax = notes.notes.length;\n  let note = notes.notes[getRandomInt(noteMax)];\n  note = note + (getRandomInt(2) + 4)\n  return note;\n}\n\n// generate a melody\nexport function generateMelody(progression, totalLength) {\n  let melody = [];\n  for (let measure = 0; measure < totalLength; measure++) {\n    if (getRandomInt(6) == 2) continue;\n    let progLength = progression.length;\n    let chord = progression[measure % progLength];\n    for (let beat = 0; beat < 4; beat++) {\n      if (getRandomInt(3) == 2) continue;\n      for (let subdivision = 0; subdivision < 2; subdivision++) {\n        if (getRandomInt(2) == 1) continue;\n        const note = getRandomNote(chord);\n        const time = measure + ':' + beat + ':' + subdivision*2;\n        const entry = { 'time': time, 'note': note, 'duration': '8n' };\n        melody.push(entry);\n      }\n    }\n  }\n  return melody;\n}\n\nexport function getBassNotes(progression) {\n  let bassNotes = [];\n  progression.forEach(chord => {\n    bassNotes.push([chord[0]]);\n  });\n  return bassNotes;\n}\n\n// constant note, varying rhythm\nexport function makePerc(instrument, notes, duration, rhythm, start, loop, loopEnd) {\n  const part = new Tone.Part(function(time) {\n    instrument.triggerAttackRelease(notes, duration, time);\n  }, rhythm).start(start);\n  part.loop = loop;\n  part.loopEnd = loopEnd;\n  return part;\n}\n\n// make a melody\nexport function makeMelody(instrument, melody, loop, loopEnd) {\n  const part = new Tone.Part(function(time, note) {\n    instrument.triggerAttackRelease(note.note, note.duration, time);\n  }, melody).start(0);\n  part.loop = loop;\n  part.loopEnd = loopEnd;\n  return part\n}\n\n// make chord progression with block chords and rhythm\nexport function makeProgression(instrument, progression, duration, rhythms, \n  measuresPerChord, loop, loopEnd) {\n    if (instrument == null) return; \n    let parts = [];\n    let start = 0;\n    let counter = 0;\n    let rhythm = rhythms[counter];\n    progression.forEach(chord => {\n      let measure = start + \"m\";\n      const part = makePerc(instrument, chord, duration, rhythm,\n        measure, loop, loopEnd);\n      parts.push(part);\n      start = start + measuresPerChord;\n      counter = (counter + 1) % rhythms.length;\n      rhythm = rhythms[counter];\n    });\n    return parts;\n  }\n\n  /*\n// declare tempo\nexport let bpm = 80;\nexport let progression, progRhythm, bassRhythm, percRhythm;\nexport let progDuration, bassNotes, percNotes;\nexport let melodyInst, progInst, bassInst, percInst;\n\nexport function setMorning() {\n  progression = MusicVars.twoFiveOne;\n  bpm = getRandomInt(60) + 100;\n\n  progRhythm = [MusicVars.daytimeRhythm1, MusicVars.daytimeRhythm2];\n  bassRhythm = [MusicVars.dottedQuarterEigth, MusicVars.dottedQuarterEigth];\n  bassNotes = getBassNotes(progression);\n  percRhythm = [MusicVars.twoThreeClaveRhythm1, MusicVars.twoThreeClaveRhythm2];\n  percNotes = [\"C1\", \"C1\"];\n  progDuration = \"8n\"\n\n  melodyInst = MusicVars.synth;\n  MusicVars.piano.volume.value = -8;\n  progInst = MusicVars.piano;\n  bassInst = MusicVars.bassPluck;\n  percInst = MusicVars.kickDrum;\n}\n\nexport function setAfternoon() {\n  progression = MusicVars.autumnLeaves;\n  bpm = getRandomInt(60) + 80;\n\n  progRhythm = [MusicVars.daytimeRhythm1, MusicVars.daytimeRhythm2];\n  bassRhythm = [MusicVars.oneFourRhythm, MusicVars.oneFourRhythm];\n  bassNotes = getBassNotes(progression);\n  percRhythm = [MusicVars.twoThreeClaveRhythm2];\n  percNotes = [\"C1\", \"C1\"];\n  progDuration = \"8n\"\n\n  melodyInst = MusicVars.guitar;\n  MusicVars.synth.volume.value = -20;\n  progInst = MusicVars.synth;\n  bassInst = MusicVars.bassPluck;\n  percInst = MusicVars.kickDrum;\n}\n\nexport function setNight() {\n  progression = MusicVars.nardisBridge;\n  bpm = getRandomInt(30) + 50;\n\n  progRhythm = [MusicVars.oneFourRhythm, MusicVars.oneNote];\n  bassRhythm = [MusicVars.dottedQuarterEigth, MusicVars.dottedQuarterEigth];\n  bassNotes = getBassNotes(progression);\n  percRhythm = [MusicVars.twoThreeClaveRhythm1, MusicVars.twoThreeClaveRhythm2];\n  percNotes = [\"C1\", \"C1\"];\n  progDuration = \"1m\"\n\n  melodyInst = MusicVars.piano;\n  progInst = MusicVars.piano;\n  bassInst = null;\n  percInst = null;\n}\n\nexport function setRainy() {\n  progression = MusicVars.rainingOutside;\n  bpm = getRandomInt(40) + 80;\n\n  progRhythm = [MusicVars.oneNote];\n  bassRhythm = [MusicVars.dottedQuarterEigth, MusicVars.dottedQuarterEigth];\n  bassNotes = getBassNotes(progression);\n  percRhythm = [MusicVars.twoThreeClaveRhythm1, MusicVars.twoThreeClaveRhythm2];\n  percNotes = [\"C1\", \"C1\"];\n  progDuration = \"1m\"\n\n  MusicVars.bell.volume.value = 0;\n  melodyInst = MusicVars.bell;\n  MusicVars.synth.volume.value = -25;\n  progInst = MusicVars.synth;\n  MusicVars.bell.volume.value = -15;\n  bassInst = MusicVars.bell;\n  percInst = MusicVars.hihat;\n}\n\nexport function setSnowy() {\n  progression = MusicVars.ipanema;\n  bpm = getRandomInt(60) + 80;\n\n  progRhythm = [MusicVars.dottedQuarterEigth];\n  bassRhythm = [MusicVars.daytimeRhythm1];\n  bassNotes = getBassNotes(progression);\n  percRhythm = [MusicVars.twoFourEigthRhythm];\n  percNotes = [\"C1\", \"C1\"];\n  progDuration = \"1m\"\n\n  melodyInst = MusicVars.piano;\n  MusicVars.bell.volume.value = -25;\n  progInst = MusicVars.bell;\n  bassInst = null;\n  percInst = MusicVars.tambourine;\n}\n\n*/","//const express = require(\"express\");\n//const bodyParser = require(\"body-parser\");\n//const request = require(\"request\");\n//const app = express();\n\n//require(\"dotenv\").config();\n//const apiKey = `${process.env.API_KEY}`;\n\nimport { config } from \"./config.js\";\n\nconst apiKey = config.API_KEY;\n\nexport function getWeather(adjust) {\n  fetch('https://api.openweathermap.org/data/2.5/weather?id=' + 6167865 + '&appid=' + apiKey)  \n  .then(function(resp) { return resp.json() }) // Convert data to json\n  .then(function(data) {\n    //console.log(data.weather[0].id);\n    let weatherID = data.weather[0].id;\n    //weatherID = 503;\n    adjust(weatherID);\n  })\n  .catch(function() {\n    // catch any errors\n  });\n}","import logo from './logo.svg';\nimport './App.css';\nimport * as Tone from \"tone\";\nimport G from 'glob';\nimport Granim from 'react-granim'\nimport { useEffect } from 'react';\n/*\nimport bassmp3 from './sounds/bass1.mp3';\nimport hihatmp3 from './sounds/drumhihat1.mp3';\nimport vibesmp3 from './sounds/vibes1.mp3';\nimport guitarwav from './sounds/guitar1.wav';\nimport tambourinewav from './sounds/tambourine.wav';\n*/\nimport * as MusicVars from './musicVars.js';\nimport * as MusicFuncs from './music.js';\nimport { getWeather } from './weather';\nimport { Helmet } from \"react-helmet\";\n\nconst { Chord, Progression, Scale } = require(\"@tonaljs/tonal\");\n\nfunction App() {\n  /*\n  // declare samples\n  const piano = new Tone.Sampler({\n    urls: {\n      C4: \"C4.mp3\",\n      C5: \"C5.mp3\",\n    },\n    baseUrl: \"https://tonejs.github.io/audio/salamander/\",\n    volume: -4\n  }).toDestination();\n\n  const bell = new Tone.Sampler(\n    { C4: vibesmp3 },\n    { \n      onload: () => {\n        console.log(\"loaded vibes\");\n      }\n    }\n    ).toDestination();\n\n  const guitar = new Tone.Sampler(\n    { G4: guitarwav },\n    { \n      onload: () => {\n        console.log(\"loaded guitar\");\n        guitar.volume.value = -10;\n      }\n    }\n  ).toDestination();\n\n  const hihat = new Tone.Sampler(\n    { C1: hihatmp3 },\n    { \n      onload: () => {\n        console.log(\"loaded hihat\");\n        hihat.volume.value = -10;\n      }\n    },\n  ).toDestination();\n\n  const tambourine = new Tone.Sampler(\n    { C1: tambourinewav },\n    { \n      onload: () => {\n        console.log(\"loaded tambourine\");\n        tambourine.volume.value = -10;\n      }\n    }\n  ).toDestination();\n\n  const bassPluck = new Tone.Sampler(\n    { C4: bassmp3 },\n    { \n      onload: () => {\n        console.log(\"loaded bass\");\n        bassPluck.volume.value = -10;\n      }\n    }\n  ).toDestination();\n\n  const synth = new Tone.PolySynth().toDestination();\n  const kickDrum = new Tone.MembraneSynth({\n    volume: -6\n  }).toDestination();\n\n  // declare chords\n  const iimin7 = Chord.getChord(\"min7\", \"A4\", \"A4\");\n  const V7 = Chord.getChord(\"7\", \"D4\", \"A4\");\n  const IMaj7 = Chord.getChord(\"maj7\", \"G4\", \"G4\");\n  const I6 = Chord.getChord(\"6\", \"G4\", \"G4\");\n  const vimin7 = Chord.getChord(\"min7\", \"E4\", \"E4\");\n  const iiimin7 = Chord.getChord(\"min7\", \"B4\", \"B4\");\n  const bII7b5 = Chord.getChord(\"7b5\", \"G#4\", \"G#4\");\n  const II7 = Chord.getChord(\"7\", \"A4\", \"A4\");\n  const IVMaj7 = Chord.getChord(\"maj7\", \"C4\", \"G4\");\n  const viimin7 = Chord.getChord(\"min7\", \"F#4\", \"F#4\");\n  const III7 = Chord.getChord(\"7\", \"B3\", \"F#4\");\n\n  // declare chord progressions\n  // chord progressions will be 8 measures\n  let twoFiveOne = [\n    iimin7.notes,\n    V7.notes,\n    IMaj7.notes,\n    I6.notes\n  ];\n  twoFiveOne = twoFiveOne.concat(twoFiveOne);\n\n  let rainingOutsideProg = [\n    vimin7.notes,\n    iiimin7.notes,\n    iimin7.notes,\n    IMaj7.notes\n  ];\n  rainingOutsideProg = rainingOutsideProg.concat(rainingOutsideProg);\n\n  let nardisBridge = [\n    iiimin7.notes,\n    IMaj7.notes,\n    iiimin7.notes,\n    IMaj7.notes\n  ];\n  nardisBridge = nardisBridge.concat(nardisBridge);\n\n  let ipanema = [\n    IMaj7.notes, IMaj7.notes, II7.notes, II7.notes,\n    iimin7.notes, bII7b5.notes, IMaj7.notes, bII7b5.notes\n  ];\n\n  let autumnLeaves = [\n    iimin7.notes, V7.notes, IMaj7.notes, IVMaj7.notes,\n    viimin7.notes, III7.notes, vimin7.notes, vimin7.notes\n  ];\n\n  const progressions = [twoFiveOne, rainingOutsideProg, nardisBridge, ipanema];\n\n  // declare rhythms for 1 measure\n  const oneNote = [{ time: '0:0' }];\n\n  const daytimeRhythm1 = [\n    { time: '0:0' },\n    { time: '0:1' },\n    { time: '0:3' },\n  ];\n\n  const daytimeRhythm2 = [\n    { time: '0:0' },\n    { time: '0:0:2' },\n    { time: '0:1:2' },\n    { time: '0:2:2' },\n    { time: '0:3:2' },\n  ]\n\n  const twoFourRhythm = [\n    { time: '0:1' },\n    { time: '0:3' },\n  ]\n\n  const twoFourEigthRhythm = [\n    { time: '0:1' },\n    { time: '0:3' },\n    { time: '0:3:2' },\n  ]\n\n  const twoThreeClaveRhythm1 = [\n    { time: '0:1' },\n    { time: '0:2' },\n  ]\n\n  const twoThreeClaveRhythm2 = [\n    { time: '0:0' },\n    { time: '0:1:2' },\n    { time: '0:3' }\n  ]\n\n  const oneFourRhythm = [\n    { time: '0:0' },\n    { time: '0:3' }\n  ]\n\n  const eigthNoteRhythm = [\n    { time: '0:0' },\n    { time: '0:0:2' },\n    { time: '0:1' },\n    { time: '0:1:2' },\n    { time: '0:2' },\n    { time: '0:2:2' },\n    { time: '0:3' },\n    { time: '0:3:2' }\n  ]\n\n  const dottedQuarterEigth = [\n    { time: '0:0' },\n    { time: '0:1:2' },\n    { time: '0:2:0' },\n    { time: '0:3:2' }\n  ];\n\n  const progressionRhythms = [\n    [oneNote],\n    [oneFourRhythm, oneNote],\n    [daytimeRhythm1, daytimeRhythm2],\n    [twoThreeClaveRhythm1, twoThreeClaveRhythm2],\n    [twoThreeClaveRhythm2, twoThreeClaveRhythm1],\n  ]\n\n  const percRhythms = [\n    [oneNote],\n    [oneFourRhythm],\n    [twoThreeClaveRhythm1, twoThreeClaveRhythm2],\n    [twoThreeClaveRhythm2, twoThreeClaveRhythm1],\n    [eigthNoteRhythm]\n  ]\n  */\n\n  /*\n  // get random integer\n  function getRandomInt(max) {\n    return Math.floor(Math.random() * max);\n  }\n\n  // get random note in chord\n  function getRandomNote(chord) {\n    chord = Chord.detect(chord)[0];\n    let bass = chord.substr(0, 1);\n    //console.log(chord);\n    if (chord.includes('/')) {\n      chord = chord.split('/');\n      chord = chord[0];\n    }\n    let scale = Chord.chordScales(chord[0]);\n    scale = scale[0];\n    //console.log(scale);\n    const notes = Scale.get(\"G \" + scale);\n    const noteMax = notes.notes.length;\n    let note = notes.notes[getRandomInt(noteMax)];\n    note = note + (getRandomInt(2) + 4)\n    return note;\n  }\n\n  // generate a melody\n  function generateMelody(progression, totalLength) {\n    let melody = [];\n    for (let measure = 0; measure < totalLength; measure++) {\n      if (getRandomInt(6) == 2) continue;\n      let progLength = progression.length;\n      let chord = progression[measure % progLength];\n      for (let beat = 0; beat < 4; beat++) {\n        if (getRandomInt(3) == 2) continue;\n        for (let subdivision = 0; subdivision < 2; subdivision++) {\n          if (getRandomInt(2) == 1) continue;\n          const note = getRandomNote(chord);\n          const time = measure + ':' + beat + ':' + subdivision*2;\n          const entry = { 'time': time, 'note': note, 'duration': '8n' };\n          melody.push(entry);\n        }\n      }\n    }\n    return melody;\n  }\n\n  function getBassNotes(progression) {\n    let bassNotes = [];\n    progression.forEach(chord => {\n      bassNotes.push([chord[0]]);\n    });\n    return bassNotes;\n  }\n\n  // constant note, varying rhythm\n  function makePerc(instrument, notes, duration, rhythm, start, loop, loopEnd) {\n    const part = new Tone.Part(function(time) {\n      instrument.triggerAttackRelease(notes, duration, time);\n    }, rhythm).start(start);\n    part.loop = loop;\n    part.loopEnd = loopEnd;\n    return part;\n  }\n\n  // make a melody\n  function makeMelody(instrument, melody, loop, loopEnd) {\n    const part = new Tone.Part(function(time, note) {\n      instrument.triggerAttackRelease(note.note, note.duration, time);\n    }, melody).start(0);\n    part.loop = loop;\n    part.loopEnd = loopEnd;\n    return part\n  }\n\n  // make chord progression with block chords and rhythm\n  function makeProgression(instrument, progression, duration, rhythms, \n    measuresPerChord, loop, loopEnd) {\n      if (instrument == null) return; \n      let parts = [];\n      let start = 0;\n      let counter = 0;\n      let rhythm = rhythms[counter];\n      progression.forEach(chord => {\n        let measure = start + \"m\";\n        const part = makePerc(instrument, chord, duration, rhythm,\n          measure, loop, loopEnd);\n        parts.push(part);\n        start = start + measuresPerChord;\n        counter = (counter + 1) % rhythms.length;\n        rhythm = rhythms[counter];\n      });\n      return parts;\n    }\n  */\n  // declare tempo\n  let bpm = 80;\n  let progression, progRhythm, bassRhythm, percRhythm;\n  let progDuration, bassNotes, percNotes;\n  let melodyInst, progInst, bassInst, percInst;\n  getWeather();\n  \n  function setMorning() {\n    progression = MusicVars.twoFiveOne;\n    bpm = MusicFuncs.getRandomInt(60) + 100;\n\n    progRhythm = [MusicVars.daytimeRhythm1, MusicVars.daytimeRhythm2];\n    bassRhythm = [MusicVars.dottedQuarterEigth, MusicVars.dottedQuarterEigth];\n    bassNotes = MusicFuncs.getBassNotes(progression);\n    percRhythm = [MusicVars.twoThreeClaveRhythm1, MusicVars.twoThreeClaveRhythm2];\n    percNotes = [\"C1\", \"C1\"];\n    progDuration = \"8n\"\n\n    melodyInst = MusicVars.synth;\n    MusicVars.piano.volume.value = -8;\n    progInst = MusicVars.piano;\n    bassInst = MusicVars.bassPluck;\n    percInst = MusicVars.kickDrum;\n  }\n\n  function setAfternoon() {\n    progression = MusicVars.autumnLeaves;\n    bpm = MusicFuncs.getRandomInt(60) + 80;\n\n    progRhythm = [MusicVars.daytimeRhythm1, MusicVars.daytimeRhythm2];\n    bassRhythm = [MusicVars.oneFourRhythm, MusicVars.oneFourRhythm];\n    bassNotes = MusicFuncs.getBassNotes(progression);\n    percRhythm = [MusicVars.twoThreeClaveRhythm2];\n    percNotes = [\"C1\", \"C1\"];\n    progDuration = \"8n\"\n\n    melodyInst = MusicVars.guitar;\n    MusicVars.synth.volume.value = -20;\n    progInst = MusicVars.synth;\n    bassInst = MusicVars.bassPluck;\n    percInst = MusicVars.kickDrum;\n  }\n\n  function setNight() {\n    progression = MusicVars.nardisBridge;\n    bpm = MusicFuncs.getRandomInt(30) + 50;\n\n    progRhythm = [MusicVars.oneFourRhythm, MusicVars.oneNote];\n    bassRhythm = [MusicVars.dottedQuarterEigth, MusicVars.dottedQuarterEigth];\n    bassNotes = MusicFuncs.getBassNotes(progression);\n    percRhythm = [MusicVars.twoThreeClaveRhythm1, MusicVars.twoThreeClaveRhythm2];\n    percNotes = [\"C1\", \"C1\"];\n    progDuration = \"1m\"\n\n    melodyInst = MusicVars.piano;\n    progInst = MusicVars.piano;\n    bassInst = null;\n    percInst = null;\n  }\n\n  function setRainy() {\n    progression = MusicVars.rainingOutside;\n    bpm = MusicFuncs.getRandomInt(40) + 80;\n\n    progRhythm = [MusicVars.oneNote];\n    bassRhythm = [MusicVars.dottedQuarterEigth, MusicVars.dottedQuarterEigth];\n    bassNotes = MusicFuncs.getBassNotes(progression);\n    percRhythm = [MusicVars.twoThreeClaveRhythm1, MusicVars.twoThreeClaveRhythm2];\n    percNotes = [\"C1\", \"C1\"];\n    progDuration = \"1m\"\n\n    MusicVars.bell.volume.value = 0;\n    melodyInst = MusicVars.bell;\n    MusicVars.synth.volume.value = -25;\n    progInst = MusicVars.synth;\n    MusicVars.bell.volume.value = -15;\n    bassInst = MusicVars.bell;\n    percInst = MusicVars.hihat;\n  }\n\n  function setSnowy() {\n    progression = MusicVars.ipanema;\n    bpm = MusicFuncs.getRandomInt(60) + 80;\n\n    progRhythm = [MusicVars.dottedQuarterEigth];\n    bassRhythm = [MusicVars.daytimeRhythm1];\n    bassNotes = MusicFuncs.getBassNotes(progression);\n    percRhythm = [MusicVars.twoFourEigthRhythm];\n    percNotes = [\"C1\", \"C1\"];\n    progDuration = \"1m\"\n\n    melodyInst = MusicVars.piano;\n    MusicVars.bell.volume.value = -25;\n    progInst = MusicVars.bell;\n    bassInst = null;\n    percInst = MusicVars.tambourine;\n  }\n\n  function startSong() {\n    const melody1 = MusicFuncs.generateMelody(progression, 8);\n    const melodyPart1 = MusicFuncs.makeMelody(melodyInst, melody1, false, '0:0');\n    const perc1 = MusicFuncs.makeProgression(percInst, percNotes, \"8n\", percRhythm, 1, true, '2:0');\n    const backingChords1 = MusicFuncs.makeProgression(progInst, progression, progDuration, progRhythm, \n      1, false, '8:0');\n    const bass1 = MusicFuncs.makeProgression(bassInst, bassNotes, '8n', bassRhythm, \n      1, false, '8:0');\n  }\n\n  function startTone() {\n    //console.log(melody1);\n    if (Tone.Transport.state !== 'started') {\n      Tone.start();\n      Tone.Transport.bpm.value = bpm;\n      Tone.Transport.loop = true;\n      Tone.Transport.loopEnd = '8:0';\n      Tone.Transport.start();\n      startSong();\n    } else {\n      Tone.Transport.stop();\n    }\n  }\n\n  function adjustForWeather(weatherID) {\n    let screenBg = document.getElementById(\"screen-background\");\n    let startButton = document.getElementById(\"start-button\");\n    let weatherMain = Math.floor(weatherID / 100);\n    //console.log(weatherMain);\n    let taggedWeathers = [2, 3, 5, 6];\n    if (taggedWeathers.includes(weatherMain)) {\n      screenBg.classList.remove('background-morning');\n      screenBg.classList.remove('background-afternoon');\n      screenBg.classList.remove('background-night');\n      screenBg.classList.remove('background-rain');\n      screenBg.classList.remove('background-snow');\n    }\n    if (weatherMain == 2) {\n      screenBg.classList.add('background-rain');\n      setRainy();\n      startButton.textContent = \"thunderstorms outside.\";\n    }\n    if (weatherMain == 3) {\n      screenBg.classList.add('background-rain');\n      setRainy();\n      startButton.textContent = \"a small drizzle.\";\n    }\n    if (weatherMain == 5) {\n      screenBg.classList.add('background-rain');\n      setRainy();\n      startButton.textContent = \"rainy day.\";\n    }\n    if (weatherMain == 6) {\n      screenBg.classList.add('background-snow');\n      setSnowy();\n      startButton.textContent = \"snowy!\";\n    }\n  }\n\n  let date = new Date();\n  let hours = date.getHours();\n  //hours = 10;\n\n  useEffect(() => {\n    let screenBg = document.getElementById(\"screen-background\");\n    let startButton = document.getElementById(\"start-button\");\n    screenBg.classList.remove('background-morning');\n    screenBg.classList.remove('background-afternoon');\n    screenBg.classList.remove('background-night');\n    screenBg.classList.remove('background-rain');\n    screenBg.classList.remove('background-snow');\n    if (hours >= 20 || hours < 6) {\n      screenBg.classList.add('background-night');\n      setNight();\n      startButton.textContent = \"it's nighttime.\";\n    }\n    else if (6 <= hours && hours < 15) {\n      screenBg.classList.add('background-morning');\n      setMorning();\n      startButton.textContent = \"good morning!\";\n    }\n    else if (15 <= hours && hours < 20) {\n      screenBg.classList.add('background-afternoon');\n      setAfternoon();\n      startButton.textContent = \"a lazy afternoon...\";\n    }\n\n    getWeather(adjustForWeather);\n  });\n\n  return (\n    <div id=\"screen-background\" className=\"animated-background background-afternoon\">\n      <button id='start-button' onClick={() => startTone()}>Start</button>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}