{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["require","Chord","Scale","Progression","App","piano","Tone","urls","C4","C5","baseUrl","toDestination","bell","E4","hihat","G4","C1","iimin7","volume","getChord","V7","IMaj7","I6","viimin7","iiimin7","twoFiveOne","notes","concat","rainingOutsideProg","nardisBridge","getRandomInt","max","Math","floor","random","getRandomNote","chord","detect","substr","includes","split","scale","chordScales","get","noteMax","length","note","makePerc","instrument","duration","rhythm","start","loop","loopEnd","part","time","triggerAttackRelease","melody","makeMelody","progression","totalLength","measure","beat","subdivision","entry","push","generateMelody","rhythms","measuresPerChord","parts","counter","forEach","makeProgression","className","onClick","state","bpm","value","stop","src","logo","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f52d72e0.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\nimport * as Tone from \"tone\";\nimport G from 'glob';\nconst { Chord, Progression, Scale } = require(\"@tonaljs/tonal\");\n\nfunction App() {\n\n  // declare samples\n  const piano = new Tone.Sampler({\n    urls: {\n      C4: \"C4.mp3\",\n      C5: \"C5.mp3\",\n    },\n    baseUrl: \"https://tonejs.github.io/audio/salamander/\",\n  }).toDestination();\n\n  const bell = new Tone.Sampler({\n    urls: {\n      E4: \"glasshit1.mp3\",\n    },\n    baseUrl: \"https://tonejs.github.io/audio/berklee/\",\n  }).toDestination();\n\n  const guitar = new Tone.Sampler({\n    urls: {\n      G4: \"guitar_Gstring.mp3\",\n    },\n    baseUrl: \"https://tonejs.github.io/audio/berklee/\",\n  }).toDestination();\n\n  const hihat = new Tone.Sampler({\n    urls: {\n      C1: \"Kit3/hihat.mp3\",\n    },\n    baseUrl: \"https://tonejs.github.io/audio/drum-samples/\",\n  }).toDestination();\n\n  const synth = new Tone.PolySynth().toDestination();\n  const kickDrum = new Tone.MembraneSynth({\n    volume: 6\n  }).toDestination();\n\n  // declare chords\n  const iimin7 = Chord.getChord(\"min7\", \"A4\", \"A4\");\n  const V7 = Chord.getChord(\"7\", \"D4\", \"A4\");\n  const IMaj7 = Chord.getChord(\"maj7\", \"G4\", \"G4\");\n  const I6 = Chord.getChord(\"6\", \"G4\", \"G4\");\n  const viimin7 = Chord.getChord(\"min7\", \"E5\", \"E5\");\n  const iiimin7 = Chord.getChord(\"min7\", \"B4\", \"B4\");\n\n  // declare chord progressions\n  // chord progressions will be 8 measures\n  let twoFiveOne = [\n    iimin7.notes,\n    V7.notes,\n    IMaj7.notes,\n    I6.notes\n  ];\n  twoFiveOne = twoFiveOne.concat(twoFiveOne);\n\n  let rainingOutsideProg = [\n    viimin7.notes,\n    iiimin7.notes,\n    iimin7.notes,\n    IMaj7.notes\n  ];\n  rainingOutsideProg = rainingOutsideProg.concat(rainingOutsideProg);\n\n  let nardisBridge = [\n    iiimin7.notes,\n    IMaj7.notes,\n    iiimin7.notes,\n    IMaj7.notes\n  ];\n  nardisBridge = nardisBridge.concat(nardisBridge);\n\n  // declare rhythms for 1 measure\n  const oneNote = [{ time: '0:0' }];\n\n  const daytimeRhythm1 = [\n    { time: '0:0' },\n    { time: '0:1' },\n    { time: '0:3' },\n  ];\n\n  const daytimeRhythm2 = [\n    { time: '0:0' },\n    { time: '0:0:2' },\n    { time: '0:1:2' },\n    { time: '0:2:2' },\n    { time: '0:3:2' },\n  ]\n\n  const twoFourRhythm = [\n    { time: '0:1' },\n    { time: '0:3' },\n  ]\n\n  const twoThreeClaveRhythm1 = [\n    { time: '0:1' },\n    { time: '0:2' },\n  ]\n\n  const twoThreeClaveRhythm2 = [\n    { time: '1:0' },\n    { time: '1:1:2' },\n    { time: '1:3' }\n  ]\n\n  const oneFourRhythm = [\n    { time: '0:0' },\n    { time: '0:3' }\n  ]\n\n  const eigthNoteRhythm = [\n    { time: '0:0' },\n    { time: '0:0:2' },\n    { time: '0:1' },\n    { time: '0:1:2' },\n    { time: '0:2' },\n    { time: '0:2:2' },\n    { time: '0:3' },\n    { time: '0:3:2' }\n  ]\n\n  // declare tempo\n  const BPM = 80;\n\n  // get random integer\n  function getRandomInt(max) {\n    return Math.floor(Math.random() * max);\n  }\n\n  // get random note in chord\n  function getRandomNote(chord) {\n    chord = Chord.detect(chord)[0];\n    let bass = chord.substr(0, 1);\n    //console.log(chord);\n    if (chord.includes('/')) {\n      chord = chord.split('/');\n      chord = chord[0];\n    }\n    let scale = Chord.chordScales(chord[0]);\n    scale = scale[0];\n    //console.log(scale);\n    const notes = Scale.get(\"G \" + scale);\n    const noteMax = notes.notes.length;\n    let note = notes.notes[getRandomInt(noteMax)];\n    note = note + (getRandomInt(2) + 4)\n    return note;\n  }\n\n  // generate a melody\n  function generateMelody(progression, totalLength) {\n    let melody = [];\n    for (let measure = 0; measure < totalLength; measure++) {\n      if (getRandomInt(6) == 2) continue;\n      let progLength = progression.length;\n      let chord = progression[measure % progLength];\n      for (let beat = 0; beat < 4; beat++) {\n        if (getRandomInt(3) == 2) continue;\n        for (let subdivision = 0; subdivision < 2; subdivision++) {\n          if (getRandomInt(2) == 1) continue;\n          const note = getRandomNote(chord);\n          const time = measure + ':' + beat + ':' + subdivision*2;\n          const entry = { 'time': time, 'note': note, 'duration': '8n' };\n          melody.push(entry);\n        }\n      }\n    }\n    return melody;\n  }\n\n  // make a percussion or piano chords part\n  function makePerc(instrument, notes, duration, rhythm, start, loop, loopEnd) {\n    const part = new Tone.Part(function(time) {\n      instrument.triggerAttackRelease(notes, duration, time);\n    }, rhythm).start(start);\n    part.loop = loop;\n    part.loopEnd = loopEnd;\n    return part;\n  }\n\n  // make a melody\n  function makeMelody(instrument, melody, loop, loopEnd) {\n    const part = new Tone.Part(function(time, note) {\n      instrument.triggerAttackRelease(note.note, note.duration, time);\n    }, melody).start(0);\n    part.loop = loop;\n    part.loopEnd = loopEnd;\n    return part\n  }\n\n  // make chord progression with block chords and rhythm\n  function makeProgression(instrument, progression, duration, rhythms, \n    measuresPerChord, loop, loopEnd) {\n      let parts = [];\n      let start = 0;\n      let counter = 0;\n      let rhythm = rhythms[counter];\n      progression.forEach(chord => {\n        const part = makePerc(instrument, chord, duration, rhythm,\n          start, loop, loopEnd);\n        parts.push(part);\n        start = start + 2*measuresPerChord;\n        counter = (counter + 1) % rhythms.length;\n        rhythm = rhythms[counter];\n      });\n      return parts;\n    }\n\n  const melody1 = generateMelody(nardisBridge, 8);\n  const melodyPart1 = makeMelody(bell, melody1, false, '0:0');\n  const perc1 = makePerc(hihat, \"C1\", \"8n\", eigthNoteRhythm, 0, true, '1:0');\n\n  // backing chords added measure by measure\n\n  const backingChords = makeProgression(piano, nardisBridge, '1m', [oneNote], \n    1, true, '4:0');\n\n  /*\n  const backingChords1 = makePerc(piano, nardisBridge[0],\n    '1m', oneNote, 0, true, '4:0');\n\n  const backingChords2 = makePerc(piano, nardisBridge[1],\n    '1m', oneNote, 2, true, '4:0');\n\n  const backingChords3 = makePerc(piano, nardisBridge[2],\n    '1m', oneNote, 4, true, '4:0');\n\n  const backingChords4 = makePerc(piano, nardisBridge[3],\n    '1m', oneNote, 6, true, '4:0');\n    */\n\n  function startTone() {\n    //console.log(melody1);\n    if (Tone.Transport.state !== 'started') {\n      Tone.start();\n      Tone.Transport.bpm.value = BPM;\n      Tone.Transport.loop = true;\n      Tone.Transport.loopEnd = '8:0';\n      Tone.Transport.start();\n    } else {\n      Tone.Transport.stop();\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      <button className=\"note\" onClick={() => startTone()}>\n          Start\n        </button>\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload!!\n        </p>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}